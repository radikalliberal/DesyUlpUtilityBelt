int TRUE  = 1;
int FALSE = 0;


/**
 *  @brief tauscht einen Integer in einen String um
 *  
 *  @param [in] number integer-Wert
 *  @return Repräsentation als String
 */
string int2str(int number) {
    status("int2str()");
    string temp;
    sprintf(temp,"%d",number);
    return temp;
}

/**
 *  @brief tauscht einen real-Wert in einen String
 *  
 *  @param [in] value real-Wert
 *  @return Repräsentation als String
 */
string real2str(real value) {
	status("real2str()");
	string returnval;
	sprintf(returnval,"%f",value);
	return returnval;
}

/**
 *  @brief tauscht einen Buchstaben eines Strings gegen einen anderen
 *  
 *  @param [in] DerString siehe name
 *  @param [in] old       zu tauschender Buchstabe
 *  @param [in] new       neuer Buchstabe
 *  @return geänderter String
 */
string changeChar(string DerString, char old, char new) {
	status("changeChar()");
	while((strrchr(DerString,old))!=-1) {
		DerString[(strrchr(DerString,old))]=new;
	}
	return DerString;
}

/**
 *  @brief ein mittels regulärem Ausdruck gefundener
 *  
 *  @param [in] longString Parameter_Description
 *  @param [in] regex      Parameter_Description
 *  @param [in] offset     Parameter_Description
 *  @return Return_Description
 *  @note
 *  @warning
 *  @details Details
 */
string CutSubstring(string longString,string regex,int offset ) {
    status("CutSubstring()");
    int laenge;
    if(strxstr(longString,regex,offset,laenge)<0) {
        return "";
        } else {
        return strsub(longString,strxstr(longString,regex,offset,laenge),laenge);
    }
}

string TrimWhiteSpace(string s) {
    status("TrimWhiteSpace()");
    while (s && isspace(s[0]))
    s = strsub(s, 1);
    while (s && isspace(s[strlen(s) - 1]))
    s = strsub(s, 0, strlen(s) - 1);
    return s;
}

/**
 *  @brief Ein Dialog wird geöffnet mit gewünschtem Inhalt um Variablen zu checken, 
 *  wenn auf cancel gedrückt wird kann das Programm an diesem Punkt abgebrochen werden
 *  
 *  @param [in] msg Nachricht oder gewünschte Variable
 */
void Debug(string msg) {
    status("Debug()");
    dlgDialog("Debug") {
        dlgHBoxLayout { dlgTextEdit(msg); }
        dlgPushButton("+&ok") { dlgAccept();}
        dlgPushButton("-&cancel") { dlgReject(); exit (0);}
    };
}

/**
 *  \brief Logarithmus zur Basis 2 auf 3 Nachkommastellen genau
 *  
 *  \param [in] number integer Zahl
 *  \return der Logarithmus zur Basis 2
 *  
 */
real log2(int number){
	int inverse = 0;
	int k = 1;
	
	real exponent;
	if(number < 2) {
	number = 1 / number;
	inverse = 1;
	}
		
	while( int(number*1000) != int(pow(2,exponent)*1000)) {
		if((pow(2,exponent+1) > number)) {
			if(pow(2,exponent) > number) exponent -= 1 / real(k);
			else exponent += 1 / real(k);
			k *= 2;
		} else {
			exponent += 1;
		}
		//Debug(real2str(pow(2,exponent)) + " = 2^" + real2str(exponent) +"\nnumber = " + real2str(number)+"\nk = " + int2str(k));
	}
	return inverse ? (exponent ? -(1/exponent): 0) : exponent ; 
}
/**
 *  @brief vergleicht zwei Strings,
 *  
 *  @param [in] a string
 *  @param [in] b string
 *  @return 1 == a>b, 0 == a==b, -1 == a<b
 *  @note
 *  @warning
 *  @details Details
 */
int cmpstr(string a, string b) {
	if(a>b)  return  1;
	if(a==b) return  0;
	if(a<b)  return -1;
}




int START = 0;
int REPEAT = 1;
int ONCE = 0;
/**
 *  @brief ersetzt einen mittels regulärem Ausdrucks ermittelten Substring. Ersetzt auf
 *  Wunsch nur ein Auftreten des Ausdrucks oder alle.
 *  
 *  @param [in] subject        String der bearbeitet werden soll
 *  @param [in] regex          regulärer Ausdruck
 *  @param [in] replace        Ersatz für den gefundenen Ausdruck
 *  @param [in] initialOffset  siehe name
 *  @param [in] Wiederholungen 0 für einmal tauschen, 1 für bis zum Ende des Stringsw
 *  @return neuer String mit getauschten substrings
 */
string str_replace(string subject, string regex, string replace, int initialOffset, int Wiederholungen) {
    status("str_replace()");
    int lastpos = initialOffset;
    int length = 0;
		if(strxstr(subject, regex, lastpos) > -1) {
			while(strxstr(subject, regex, lastpos) >= 0) {
					int pos = strxstr(subject, regex, lastpos, length);
					string before = strsub(subject, 0, pos);
					string after = strsub(subject, pos + length);
					subject = before + replace + after;
					lastpos = pos + strlen(replace);
					if(!Wiederholungen) break;
			}
		}
    return subject;
}


/**
 *  @brief wenn ein String als regulärer Ausdruck genutz werden soll müssen einige
 *  Buchstaben mit Escape-Sequenz versehen werden damit keine Fehler auftreten. Diese
 *  Funktion setzt Escape-Sequenzen wo sie notwendig sind damit kein ungewolltes Verhalten
 *  entsteht
 *  @param [in] subject zu bearbeitender String
 *  @return bearbeiteter String
 */
string regex_from_string(string subject) { 

	subject = str_replace(subject,"\\","\\\\",START,REPEAT);
	subject = str_replace(subject," ","\\s",START,REPEAT);
	subject = str_replace(subject,"\\.","\\.",START,REPEAT);
	subject = str_replace(subject,"\\^","\\^",START,REPEAT);
	subject = str_replace(subject,"\\$","\\$",START,REPEAT);
	subject = str_replace(subject,"\\*","\\*",START,REPEAT);
	subject = str_replace(subject,"\\(","\\(",START,REPEAT);
	subject = str_replace(subject,"\\)","\\)",START,REPEAT);
	subject = str_replace(subject,"\\[","\\[",START,REPEAT);
	subject = str_replace(subject,"\\]","\\]",START,REPEAT);
	subject = str_replace(subject,"\\{","\\{",START,REPEAT);
	subject = str_replace(subject,"\\}","\\}",START,REPEAT);
	subject = str_replace(subject,"\\|","\\|",START,REPEAT);
	
	return subject;
}


/**
 *  @brief Dialog mit Stringeigabefeld 
 *  
 *  @param [in] Ueberschrifft siehe Name
 *  @param [in] Frage         siehe Name
 *  @param [in] Subject       Eingabe-String
 *  @return Eingabe-String von User
 *  @note
 *  @warning
 *  @details Details
 */
string dlgStrEd(string Ueberschrifft, string Frage, string Subject) {
    status("dlgStrEd()");
    dlgDialog(Ueberschrifft) {
        dlgLabel(Frage);
        dlgStringEdit(Subject); 
        dlgHBoxLayout { dlgPushButton("+&ok") { dlgAccept();}
        dlgPushButton("-&cancel") { dlgReject(); exit (0);} }
    };
    return Subject;
}


/**
 *  @brief Fehlermeldung, zum Fehlerhandling, mit Nutzereingabe
 *  
 *  @param [in] msg  Nachricht an den User
 *  @param [in] opt1 Auswahl 1
 *  @param [in] opt2 Auswahl 2
 *  @param [in] btns Anzahl der Möglichkeiten (1-2)
 *  @return gewählte Möglichkeit ist Rückgabewert im Format int
 */
int ErrorMsg(string msg,string opt1,string opt2,int btns) {
    status("ErrorMsg()");
    dlgDialog("Fehler") {
        dlgHBoxLayout { dlgLabel(msg); }
        dlgPushButton("+&"+opt1) { dlgAccept(); return 1;}
        if(btns>1) dlgPushButton("-&"+opt2) { dlgReject(); return 0;}
    };
}

/**
 *  @brief HTML-Tags aus Beschreibung entfernen
 *  
 *  @param [in] s string der verändert werden soll
 *  @return bearbeiteter String ohne HTML-Tags
 */
string HtmlTagsentfernen(string s) {	
	int Anfang,Ende,Laenge,dump;
	string temps1;

	s = strsub(s,0,strxstr(s,"<table"));
	
	//Zeilenumbrüche und unnötige Leerzeichen werden entfernt 
	s = str_replace(s,"\\n","",0,1);
	
	s = str_replace(s,"\\s+"," ",0,1);
	
	//Zeilenumbrüche einsetzen für <br> & <p>
	s = str_replace(s,"(<br>)|(<p>)","\n",0,1);

	
	string htmltags = 	"(html|body|h1|h2|h3|p|center|blockquote|ul|ol"
						"|li|pre|a|em|strong|i|b|u|big|small|code"	
						"|tt|hr|br|nobr|table|tr|td|th|author"
						"|dl|dt|dd|qt)";
						
	string regex = "<\\s?[/]?"+htmltags+"(\\s\\w+=\"#?\\w+\")*>";
	
	//Htmltags werden mit dem Regulären Ausdruck erkannt
	
	while(strxstr(s,regex) != -1) {
		Anfang = strxstr(s,regex,dump,Laenge);
		Ende = Anfang + Laenge;
		temps1 = strsub(s,0,Anfang);
		temps1 += strsub(s,Ende);
		s = temps1;
	}
	//Übrige < & > gegen korrekte Ausdrücke austauschen
	//s = str_replace(s,"<","&lt;",0,1);
	//s = str_replace(s,">","&gt;",0,1);
	
	s = TrimWhiteSpace(s);
	return s;
}

string HtmlCharactersTauschen(string s) {
	string chars[] = {"&lsquo;","‘","&rsquo;","’","&sbquo;","‚","&ldquo;","“","&rdquo;","”","&bdquo;","„","&dagger;","†","&Dagger;","‡","&permil;","‰","&lsaquo;","‹","&rsaquo;","›","&spades;","♠","&clubs;","♣","&hearts;","♥","&diams;","♦","&oline;","‾","&larr;","←","&uarr;","↑","&rarr;","→","&darr;","↓","&trade;","™","&quot;","\"","&amp;","&","&frasl;","/","&lt;","<","&gt;",">","&hellip;","…","&ndash;","–","&mdash;","—","&nbsp;","","&iexcl;","¡","&cent;","¢","&pound;","£","&curren;","¤","&yen;","¥","&brkbar;","¦","&sect;","§","&die;","¨","&copy;","©","&ordf;","ª","&laquo;","«","&not;","¬","&shy;","­","&reg;","®","&hibar;","¯","&deg;","°","&plusmn;","±","&sup2;","²","&sup3;","³","&acute;","´","&micro;","µ","&para;","¶","&middot;","·","&cedil;","¸","&sup1;","¹","&ordm;","º","&raquo;","»","&frac14;","¼","&frac12;","½","&frac34;","¾","&iquest;","¿","&Agrave;","À","&Aacute;","Á","&Acirc;","Â","&Atilde;","Ã","&Auml;","Ä","&Aring;","Å","&AElig;","Æ","&Ccedil;","Ç","&Egrave;","È","&Eacute;","É","&Ecirc;","Ê","&Euml;","Ë","&Igrave;","Ì","&Iacute;","Í","&Icirc;","Î","&Iuml;","Ï","&ETH;","Ð","&Ntilde;","Ñ","&Ograve;","Ò","&Oacute;","Ó","&Ocirc;","Ô","&Otilde;","Õ","&Ouml;","Ö","&times;","×","&Oslash;","Ø","&Ugrave;","Ù","&Uacute;","Ú","&Ucirc;","Û","&Uuml;","Ü","&Yacute;","Ý","&THORN;","Þ","&szlig;","ß","&agrave;","à","&aacute;","á","&acirc;","â","&atilde;","ã","&auml;","ä","&aring;","å","&aelig;","æ","&ccedil;","ç","&egrave;","è","&eacute;","é","&ecirc;","ê","&euml;","ë","&igrave;","ì","&iacute;","í","&icirc;","î","&iuml;","ï","&eth;","ð","&ntilde;","ñ","&ograve;","ò","&oacute;","ó","&ocirc;","ô","&otilde;","õ","&ouml;","ö","&divide;","÷","&oslash;","ø","&ugrave;","ù","&uacute;","ú","&ucirc;","û","&uuml;","ü","&yacute;","ý","&thorn;","þ","&yuml;","ÿ","&Alpha;","Α","&alpha;","α","&Beta;","Β","&beta;","β","&Gamma;","Γ","&gamma;","γ","&Delta;","Δ","&delta;","δ","&Epsilon;","Ε","&epsilon;","ε","&Zeta;","Ζ","&zeta;","ζ","&Eta;","Η","&eta;","η","&Theta;","Θ","&theta;","θ","&Iota;","Ι","&iota;","ι","&Kappa;","Κ","&kappa;","κ","&Lambda;","Λ","&lambda;","λ","&Mu;","Μ","&mu;","μ","&Nu;","Ν","&nu;","ν","&Xi;","Ξ","&xi;","ξ","&Omicron;","Ο","&omicron;","ο","&Pi;","Π","&pi;","π","&Rho;","Ρ","&rho;","ρ","&Sigma;","Σ","&sigma;","σ","&Tau;","Τ","&tau;","τ","&Upsilon;","Υ","&upsilon;","υ","&Phi;","Φ","&phi;","φ","&Chi;","Χ","&chi;","χ","&Psi;","Ψ","&psi;","ψ","&Omega;","Ω","&omega;","ω"};
	
	if(strxstr(s,"&\\w{1,10};") == -1) {
		//Debug("nichts gefunden in \n"+s);
		return s;
	}
	
	int i = 0;
	while(chars[2*i] != "") {
		s = str_replace(s,chars[2*i],chars[2*i+1],0,1);
		i++;
	}	
	return s;
}


