/**
 *  @file PlatzhalterErsetzen.ulp
 *  @brief 	Durch dieses Programm wird das Ersetzen von alten Bauteilen
 *  				der 4er Bibliothek von Eagle auf die neue 6er Bibliothek 
 *  				in älteren Platinen-Layouts vereinfacht.
 */
 
#include "Libdesy.lib"
 

string tempStrArr1[],tempStrArr2[],tempStr1,tempstr2,LibList;
int Counter;	
int index[]; /**< Some documentation for first. */
int position;
string out[];
string Pac_Sort_Arr[], Val_Sort_Arr[], Pac_Sort, Val_Sort;
string HerstellerNummer[], Val[], Beschreibung[], Package[], Hersteller[], Vorzug[],OrderbaseNummer[],DeviceName[],Prefix[];
int Bauteile;								///< Anzahl Bauteile

int ORDERBASE_NUMMER = 0;   ///< indize für Bauteil-Attribut im Datensatz 
int PART_NAME = 1;				  ///< indize für Bauteil-Attribut im Datensatz 
int PACKAGE = 2;            ///< indize für Bauteil-Attribut im Datensatz 
int VALUE = 3;              ///< indize für Bauteil-Attribut im Datensatz 
int VALU = 4;								///< indize für Bauteil-Attribut im Datensatz 
int HERSTELLER = 5;         ///< indize für Bauteil-Attribut im Datensatz 
int VORZUG = 6;             ///< indize für Bauteil-Attribut im Datensatz 
int BESCHREIBUNG = 7;       ///< indize für Bauteil-Attribut im Datensatz 
int PREFIX = 8;             ///< indize für Bauteil-Attribut im Datensatz 
int LIBRARY = 9;            ///< indize für Bauteil-Attribut im Datensatz 
int HERSTELLERNR = 10;       ///< indize für Bauteil-Attribut im Datensatz 
int DATENBLATT = 11;        ///< indize für Bauteil-Attribut im Datensatz 
int DEVICE_NAME = 12;       ///< indize für Bauteil-Attribut im Datensatz 
int PINS = 13;						  ///< indize für Bauteil-Attribut im Datensatz 
int CHANGE_MODE = 14;       ///< indize für Bauteil-Attribut im Datensatz 
int ORIENTATION = 15;				///< indize für Bauteil-Attribut im Datensatz 
int MIRRORED = 16;							  ///< indize für Bauteil-Attribut im Datensatz 
int SHEET = 17;							  ///< indize für Bauteil-Attribut im Datensatz 
int ID = 18;							  ///< indize für Bauteil-Attribut im Datensatz 

int NONE				= 0;		 		///<  Konstante für bessere Lesbarkeit
int COMPLETE 	  = 1;     		///<  Konstante für bessere Lesbarkeit
int ATTR_SYM 	  = 2;     		///<  Konstante für bessere Lesbarkeit
int PACK_ONLY 	= 3;     		///<  Konstante für bessere Lesbarkeit
int ATTR_ONLY 	= 4;     		///<  Konstante für bessere Lesbarkeit
int RECOVER     = 5;				///<  Konstante für bessere Lesbarkeit

int VAL = 0; 								///< Sortier-Modus 
int PAC = 1;								///< Sortier-Modus 
int VALPAC = 2;							///< Sortier-Modus 

int PartAttribOrder[] = {	ORDERBASE_NUMMER, ///< 
													HERSTELLER,
													HERSTELLERNR,
													VALU,
													VORZUG};
													
string att[]={"DATENBANKOB-NR", ///< Bauteil-Attribute hinterlegt für jedes neue Bauteil
							"HERSTELLER_NAME",
							"HERSTELLER_NR",
							"VAL",
							"ZE-VORZUG"};

string PartDataValueNames[] = {	"OrderbaseNummer",
																"P.name", 
																"P.device.package.name",
																"P.value",
																"Val",
																"Hersteller",
																"Vorzug",
																"Beschreibung",
																"P.device.prefix",
																"P.device.library",
																"HerstellerNummer",
																"Datenblatt",
																"P.device.name",
																"Pins",
																"ChangeMode",
																"Orientation",
																"mirrored",
																"Sheet",
																"Id"};

string PartData[];          ///< Bauteil-Datensätzen aus Schaltplan
string PartDataRecovery[];  ///< Bauteil-Datensätzen aus Schaltplan
string PlaceholderOnly[];		///< Bauteil-Datensätzen aus Schaltplan
int NoOfParts;              ///< Bauteil-Datensätzen aus Schaltplan
int NoOfPlaceholders;				///< Bauteil-Datensätzen aus Schaltplan

int evalChangeMode(string cMode) {
	if(cMode == int2str(NONE)) 				return	NONE;			
	if(cMode == int2str(COMPLETE))    return  COMPLETE;
	if(cMode == int2str(ATTR_SYM))    return  ATTR_SYM; 
	if(cMode == int2str(PACK_ONLY))   return  PACK_ONLY;
	if(cMode == int2str(ATTR_ONLY))   return  ATTR_ONLY;
	return 0;
} 


string getPartVal(string FullPartString, int pos) {
	string tempoarray[];
	strsplit(tempoarray,FullPartString,'\t');
	return tempoarray[pos];
}

string setPartVal(string FullPartString, int pos, string newVal) {
	string tempoarray[], newFullPartString;
	int n = strsplit(tempoarray,FullPartString,'\t');
	for(int i = 0; i <= n; i++) {	
		newFullPartString += (i == pos) ? newVal : tempoarray[i];
		newFullPartString += (i < n) ? "\t" : "";
	}
	return newFullPartString;
}
      

int partCmp(string part1, string part2) {	
	for(int i = PACKAGE; i <= PINS; i++) {
		if(getPartVal(part1,i) != getPartVal(part2,i)) {
			//Debug(getPartVal(part1,i) +"\n!=\n"+ getPartVal(part2,i));
			return FALSE;
		}
	}
	return TRUE;
}

string exchangePart(string old_Part, string new_Part, int mode) {
	string returnval;
	switch(mode) {
		case 0 /* NONE */: {
							break;
						}
		case 1 /* COMPLETE */:	{
							returnval = setPartVal(	new_Part,
																			PART_NAME,
																			getPartVal(old_Part,PART_NAME));
							returnval = setPartVal(	returnval,
																			ORIENTATION,
																			getPartVal(old_Part,ORIENTATION));
							returnval = setPartVal(	returnval,
																			MIRRORED,
																			getPartVal(old_Part,MIRRORED));
							returnval = setPartVal(	returnval,
																			SHEET,
																			getPartVal(old_Part,SHEET));
							returnval = setPartVal(	returnval,
																			ID,
																			getPartVal(old_Part,ID));
							returnval = setPartVal(	returnval,
																			CHANGE_MODE,
																			int2str(COMPLETE));
							break;
						}	
		case 2 /* ATTR_SYM */:	{
								returnval = getPartVal(old_Part,PART_NAME) + "\t" +
								getPartVal(new_Part,DEVICE_NAME) + "\t" +
								getPartVal(old_Part,PACKAGE) + "\t" +
								getPartVal(new_Part,VALUE) + "\t" +
								getPartVal(new_Part,PREFIX) + "\t" +
								getPartVal(old_Part,LIBRARY) + "\t" +
								getPartVal(old_Part,HERSTELLER) + "\t" +
								getPartVal(old_Part,HERSTELLERNR) + "\t" +
								getPartVal(old_Part,VORZUG) + "\t" +
								getPartVal(old_Part,BESCHREIBUNG) + "\t" +
								getPartVal(old_Part,DATENBLATT) + "\t" +
								getPartVal(old_Part,ORDERBASE_NUMMER) + "\t" +
								int2str(ATTR_SYM) + "\t";
							break;
						}	
		case 3 /* PACK_ONLY */:	{
							returnval = getPartVal(old_Part,PART_NAME) + "\t" +
							getPartVal(new_Part,DEVICE_NAME) + "\t" +
							getPartVal(old_Part,PACKAGE) + "\t" +
							getPartVal(new_Part,VALUE) + "\t" +
							getPartVal(new_Part,PREFIX) + "\t" +
							getPartVal(old_Part,LIBRARY) + "\t" +
							getPartVal(old_Part,HERSTELLER) + "\t" +
							getPartVal(old_Part,HERSTELLERNR) + "\t" +
							getPartVal(old_Part,VORZUG) + "\t" +
							getPartVal(old_Part,BESCHREIBUNG) + "\t" +
							getPartVal(old_Part,DATENBLATT) + "\t" +
							getPartVal(old_Part,ORDERBASE_NUMMER) + "\t" +
							int2str(PACK_ONLY) + "\t";
							break;
						}	
		case 4 /* ATTR_ONLY */:	{
							returnval = setPartVal(	new_Part,
																			PART_NAME,
																			getPartVal(old_Part,PART_NAME));
							returnval = setPartVal(	returnval,
																			ORIENTATION,
																			getPartVal(old_Part,ORIENTATION));
							returnval = setPartVal(	returnval,
																			MIRRORED,
																			getPartVal(old_Part,MIRRORED));
							returnval = setPartVal(	returnval,
																			SHEET,
																			getPartVal(old_Part,SHEET));
							returnval = setPartVal(	returnval,
																			ID,
																			getPartVal(old_Part,ID));
							returnval = setPartVal(	returnval,
																			CHANGE_MODE,
																			int2str(ATTR_ONLY));
							break;
						}	
		case 5 /* RECOVER */: {
							returnval = setPartVal(	new_Part,
																			PART_NAME,
																			getPartVal(old_Part,PART_NAME));
							returnval = setPartVal(	returnval,
																			ORIENTATION,
																			getPartVal(old_Part,ORIENTATION));
							returnval = setPartVal(	returnval,
																			MIRRORED,
																			getPartVal(old_Part,MIRRORED));
							returnval = setPartVal(	returnval,
																			SHEET,
																			getPartVal(old_Part,SHEET));
							returnval = setPartVal(	returnval,
																			ID,
																			getPartVal(old_Part,ID));
							returnval = setPartVal(	returnval,
																			CHANGE_MODE,
																			int2str(NONE));
							break;
						}
		default : {
							returnval = old_Part;
							break;
						}
	}
	
	return returnval;
}


void changeAllidenticalParts(string template, string newPart, int mode) {
	for(int i = 0; i < NoOfParts; i++) {
		if(partCmp(template,PartData[i])) {
			PartData[i] = exchangePart(PartData[i],newPart,mode);
		}
	}
	for(int k = 0; k < NoOfPlaceholders; k++) {
		if(partCmp(template,PlaceholderOnly[k])) 
			PlaceholderOnly[k] = exchangePart(PlaceholderOnly[k],newPart,mode);
	}
}              


/**
 *  @brief Die vorsortierten 
 *  
 *  @param [in] searchString Parameter_Description
 *  @param [in] SORTING      Parameter_Description
 *  @return Return_Description
 *  @note
 *  @warning
 *  @details Details
 */
int BTSearch(string searchString, int SORTING) {
	int index, lastindex, iteration, upper, Wildcard, length;
	lastindex = 0;
	string temp[], tempstr;
	index = int (Bauteile / 2);
	string db_entry;
	
	if(strxstr(searchString,"\\*") > -1) 
		searchString = strsub(searchString,0,strlen(searchString)-1);
			
	length = strlen(searchString);
	if(length <= 0) return -1;

	while(index != lastindex ) {
		iteration++;
		SORTING ? strsplit(temp,Pac_Sort_Arr[index],';') : strsplit(temp,Val_Sort_Arr[index],';'); 
		lastindex = index;
		//Debug("searchString:" + searchString +"\nVergleichsstring: " + temp[0]+ "\niteration: " + int2str(iteration)+ "\nindex : " + int2str(index)+"\nCompare :" + int2str(strCmp(searchString,temp[0])));
		db_entry = strsub(temp[0],START,length);
		//Debug(db_entry);
		switch (cmpstr(db_entry,searchString)) {
			case  1:  index -= int(Bauteile / (2 * pow(2,iteration)));
								break;
			case  0:  upper = index;
								while(db_entry == searchString) {
									SORTING ? strsplit(temp,Pac_Sort_Arr[--upper],';') : strsplit(temp,Val_Sort_Arr[--upper],';'); 
									db_entry = strsub(temp[0],START,length);
									//Debug("db_entry:"+db_entry+"\nindex:"+int2str(index)+"\n"+"lastindex:"+int2str(lastindex)+"\n");
								}	//Debug("Pac_Sort_Arr[upper--]:"+Pac_Sort_Arr[upper--]+"Pac_Sort_Arr[index]:"+Pac_Sort_Arr[index]+"\nupper--");
								return upper+1;
								break;
			case -1:	index += int(Bauteile / (2 * pow(2,iteration)));
								break;
		}
		//Debug("db_entry:"+db_entry+"\nindex:"+int2str(index)+"\n"+"lastindex:"+int2str(lastindex)+"\n");
	}
	return -1;
}
/**
 *  @brief 	Ein Suchergebnis wird noch einem zweiten Suchkriterium (Val) durchsucht
 *  @param [in] searchString Suchbegriff
 *  @param [in] Subject      Zu durchsuchender String (Liste von Bauteil-Datensätzen)
 *  @return Liste von Bauteil-Datensätzen die dem Suchkriterium genügen
 */
string refinedSearch(string searchString, string Subject) {
	string temp_arr1[], temp_arr2[], returnval;
	int length = strlen(searchString);

	for(int i = 0; i < strsplit(temp_arr1,Subject,'\n'); i++){
		strsplit(temp_arr2,temp_arr1[i],';');
		if(searchString == strsub(temp_arr2[1],0,length - 1));
			returnval += temp_arr1[i];
	}
		return returnval;
}

/**
 *  @brief Die Funktion evaluiert ob zwei Bauteile die gleiche Pinanzahl habe, falls dies
 *  nicht der Fall ist wird der User gefragt ob trotzdem die beiden Bauteile getauscht 
 *  werden sollen
 *  
 *  @param [in] part1 erstes zu vergleichendes Bauteil
 *  @param [in] part2 zweites zu vergleichendes Bauteil
 *  @return 0 -> Bauteile nicht tauschen 1 -> Bauteile tauschen
 */
int pinCheck(string part1, string part2) {
	if(getPartVal(part1, PINS) == getPartVal(part2, PINS)) {
		return TRUE;
	} else {
		if(ErrorMsg("Die Bauteile haben unterschiedlich viele Pins sind Sie \n"
									"sicher das die Teile getauscht werden sollen? 	   			 ",
									"Ja","Abbrechen",
									2)) {
			return TRUE;					
		} else {
			return FALSE;
		}
	}
	return FALSE;
}

/**
 *  @brief Mit Hilfe dieser Funktion werden die Datensätze der Bauteile aus dem Schaltplan
 *  angelegt
 *  
 */
void getPartData(){
status("getPartData()");

			
	if(schematic){
		schematic(S){
			S.parts(P) {
				if(strxstr(P.device.library,"(Spannungs_?[Vv]ersorgung)|[Vv]orlage") >= 0)
						continue; //In diesem fall handelt es sich um kein Bauteil
				string orientation;
				string seite;
				int mirrored;
				P.instances(I) {
					orientation = real2str(I.angle,0);
					mirrored = I.mirror;
					seite = int2str(I.sheet);
				}
				int pins = 0;
				string attVal[];	
				P.attributes(A) {
					for(int i = 0; i < 5; i++)
						if(A.name == att[i]) attVal[i] = A.value;
				}
				string PackageName = "";
				if(P.device.package)  PackageName = P.device.package.name;
				P.device.gates(G) {
					G.symbol.pins(I){
						pins++;
					}
				}
				PartData[NoOfParts] =   attVal[0] + "\t"
															+ P.name + "\t"
															+ PackageName + "\t"
															+ P.value + "\t"
															+ attVal[3] + "\t"
															+ attVal[1] + "\t"
															+ attVal[4] + "\t"
															+ TrimWhiteSpace(str_replace(CutSubstring(P.device.description,"[^\\n]{9,}\\n",0),"((&lt;)|<)/?[^\\n;<>]*((&gt;)|>)","",0,1)) + "\t"		//Beschreibung
															+ P.device.prefix + "\t"
															+ P.device.library + "\t"
															+ attVal[2] + "\t"
															+ CutSubstring(P.device.description,"file:\\\\[^\\n\"]*\\.[pP][dD][fF]",0) + "\t"		//Datenblatt
															+ P.device.name + "\t"
															+ int2str(pins) + "\t"
															+ int2str(NONE) + "\t" 
															+ orientation + "\t"
															+ (mirrored ? "true" : "false" )+ "\t"
															+ seite + "\t"
															+ int2str(NoOfParts);
				PartDataRecovery[NoOfParts] = PartData[NoOfParts];
				if(strxstr(P.device.library,"Platzhalter") >= 0) 
					PlaceholderOnly[NoOfPlaceholders++] = PartData[NoOfParts];
				NoOfParts++;
			}
		}
	}
}


string createTable(string Bezeichnung, string Package, int PartNr) {
 status("createTable()");
 string sb;
 int SEARCH;
 string liste;
 string Zeile;
 string t[],temp[],tempstr;
 
	if(Package == "" && Bezeichnung == ""){
		dlgMessageBox("Es wurde kein Suchbegriff angegeben");
		return "";
	}
	if(Package == "" && Bezeichnung != "") {
		sb = Bezeichnung;
		SEARCH = VAL;
	}
	if(Package != "" && Bezeichnung == "")	{
		sb = Package;
		SEARCH = PAC;
	}
	if(Package != "" && Bezeichnung != "")	{
		sb = Package;
		SEARCH = VALPAC;
	}
	
 //Debug(sb);
	if((position = BTSearch(sb,SEARCH)) < 0) {
		//Debug("Kein Fund für "+getPartVal(PartData[PartNr],DEVICE_NAME)+";"+getPartVal(PartData[PartNr],PACKAGE));
	} else {
		//Debug(int2str(position));
		if(strxstr(sb,"\\*") > -1) sb = strsub(sb,0,strlen(sb)-1);
		int Auswahl,Zeilen;
		SEARCH ? strsplit(t,Pac_Sort_Arr[position],';') : strsplit(t,Val_Sort_Arr[position],';');
		//Debug(strsub(temp[0],0,strlen(sb)));
		while(strsub(t[0],0,strlen(sb)) == sb) {
			//Debug(tempstr);
			strsplit(t,SEARCH ? Pac_Sort_Arr[position++] : Val_Sort_Arr[position++],';');
			//Debug("wert:"+strsub(temp[0],0,strlen(sb)) + " ?? sb:" + sb+"\ntempstr:"+tempstr+"\n");
			if((SEARCH == VALPAC) && (strxstr(t[1],Bezeichnung) < 0)) {
			} else {		
				string device_name = t[2];    
				string prefix = t[8];           
				string libra = t[10];          
				string hersteller = t[4];       
				string herstellernr = t[5];     
				string vorzug = t[6];           
				string beschreibung = t[7];     
				string datenblatt = t[9];      
				string orderbase_nummer = t[3];
				string pins = t[11];
				string val = SEARCH ? t[1] : t[0];
				string pacOrval = SEARCH ? t[0] + "\t" + t[1] : t[1] + "\t" + t[0];
				liste += orderbase_nummer + "\t"+t[0]+"\t" + pacOrval + "\t" + val + "\t" + hersteller
								 + "\t" + vorzug + "\t" + beschreibung + "\t" + prefix + "\t" + libra  
								 + "\t" + herstellernr + "\t" + datenblatt + "\t" + device_name 
								 + "\t" + pins + "\n";
			}
			
		}
	}
	//Debug(liste);
	
	return liste;
}

string newDataset(int PartNr) {
	string temp[];
	string Dataset[], newDataset;
	strsplit(Dataset,PartData[PartNr],'\t');
	dlgDialog("neuer Datensatz") {
		dlgGridLayout {
			dlgCell(0, 0) {
				dlgVBoxLayout{
					for(int i = 0; i < 5; i++) {
						dlgLabel(PartDataValueNames[PartAttribOrder[i]]);
					}
				}
			}
			dlgCell(0, 1) {
				dlgVBoxLayout{
					dlgHBoxLayout{ 
						dlgSpacing(320);
					}
					for(int i = 0; i < 5; i++) {
						dlgStringEdit(Dataset[PartAttribOrder[i]]);
					}
				}
			}
		}
		dlgPushButton("&Nur dieses Bauteil verändern") {
			newDataset = strjoin(Dataset,'\t');
			PartData[PartNr] = exchangePart(PartData[PartNr],newDataset,ATTR_ONLY);
			dlgAccept();
		}
		dlgPushButton("&Alle identischen Bauteile verändern") {
			newDataset = strjoin(Dataset,'\t');
			changeAllidenticalParts(PartData[PartNr],newDataset, ATTR_ONLY);
			dlgAccept();
		}
		dlgPushButton("-&Cancel") dlgReject();
	};
	
	return strjoin(Dataset,'\t');
}

		
void Vorschlaege(int PartNr, int POnly) {
status("Vorschlaege()");
	int initial_PartNr = PartNr;
	int returnval = 0;
	string Suchbegriff_Package,Suchbegriff_Bezeichnung; 
	string liste[];
	string PartAttributes[];
	string Bauteil_attribute;
	string temp[],altesBauteil[],neu[],PartDat[];
	int Auswahl,i = 0;
	int PartListAuswahl,altAuswahl,neuAuswahl;
	if(POnly)
		PartNr = str2int(getPartVal(PlaceholderOnly[PartNr],ID)); 
		//am Ende des Datensatzes steht der Index des Bauteils im Kompletten Datensatz

	if(strlen(getPartVal(PartData[PartNr],PACKAGE)) > 0) { //gibt es ein Package für das Device ? (gilt nicht für Versorgungsspannung)
		int n = strsplit(altesBauteil,PartDataRecovery[PartNr],'\t');
		for(i = 0; i < n; i++) {
			PartDat[i] += PartDataValueNames[i] + "\t" + altesBauteil[i] + "\t";
			if(getPartVal(PartData[PartNr],CHANGE_MODE) != int2str(NONE)) {
				PartDat[i] += getPartVal(PartData[PartNr],i);
			}
		}
		if(getPartVal(PartData[PartNr],PREFIX) == "R") {
			Suchbegriff_Package = "RES*";
		} else if(getPartVal(PartData[PartNr],PREFIX) == "C") {
			Suchbegriff_Package = "CAPC*";
		} else {
			Suchbegriff_Package = getPartVal(PartData[PartNr],PACKAGE);
		}
	
		dlgDialog("Bauteil-Suche " + getPartVal(PartData[PartNr],DEVICE_NAME) ) {
			//dlgLabel("Name:" + getPartVal(PartData[PartNr],DEVICE_NAME) + "\nPackage: " + getPartVal(PartData[PartNr],S_S_PACKAGE) + "\nPREFIX:" + getPartVal(PartData[PartNr],PREFIX));
			dlgVBoxLayout{
					dlgHBoxLayout{dlgSpacing(1400);}
				dlgHBoxLayout{
					dlgVBoxLayout{dlgSpacing(300);}
					dlgListView("Attribut\taltes Bauteil\t neues Bauteil",PartDat,PartListAuswahl);
					if(getPartVal(PartData[PartNr],CHANGE_MODE) != int2str(NONE)) {
						dlgPushButton("Bauteil wiederherstellen"){
							dlgDialog("Frage") {
								dlgLabel("Sollen alle Bauteile dieser Art wiederhergestellt werden?");
								dlgPushButton("Ja") {
									changeAllidenticalParts(PartData[PartNr],PartDataRecovery[PartNr],RECOVER);
									dlgAccept();
								}
								dlgPushButton("Nein nur dieses") {
									PartData[PartNr] = PartDataRecovery[PartNr];
									dlgAccept();
								}	
								dlgPushButton("Abbrechen") {
									dlgAccept();
								}		
							};
						}
					}
					dlgVBoxLayout{
						dlgHBoxLayout{
							dlgLabel("Package");
							dlgStringEdit(Suchbegriff_Package);
						}
						dlgHBoxLayout{
							dlgLabel("Bezeichnung");
							dlgStringEdit(Suchbegriff_Bezeichnung);
						}
						dlgPushButton("+&suchen")  {
							strsplit(liste,createTable(Suchbegriff_Bezeichnung,Suchbegriff_Package,PartNr),'\n');
							dlgRedisplay();
						}
					}
				}
			
			
				dlgListView(strjoin(PartDataValueNames,'\t')
										,liste
										,Auswahl) {
					dlgDialog(""){
						dlgLabel(getPartVal(liste[Auswahl],HERSTELLER) + " - " + getPartVal(liste[Auswahl],HERSTELLERNR));
						dlgPushButton("Datenblatt einsehen") 
							system("cmd /c \""+str_replace(getPartVal(liste[Auswahl],DATENBLATT)+"\"","file:","",START,ONCE));
						dlgPushButton("&Bauteil gegen neues austauschen") {
							if(pinCheck(PartData[PartNr],liste[Auswahl])) {
								PartData[PartNr] = exchangePart(PartData[PartNr],liste[Auswahl],COMPLETE);
								if(POnly) 
									PlaceholderOnly[initial_PartNr] = exchangePart(PlaceholderOnly[initial_PartNr],liste[Auswahl],COMPLETE);
								Bauteil_attribute = PartData[PartNr] ;
							}
							dlgAccept();
						}
						
						dlgPushButton("&alle identischen Bauteile gegen dieses tauschen") {
							if(pinCheck(PartData[PartNr],liste[Auswahl])) 
								changeAllidenticalParts(PartData[PartNr],liste[Auswahl],COMPLETE);
							dlgAccept();
						}
					/* 	dlgPushButton("+&Attribute und Symbol austauschen, Package erhalten") {
							PartData[PartNr] = exchangePart(PartData[PartNr],liste[Auswahl]);
							dlgAccept();
						} */
				/* 		dlgPushButton("+&Footprint austauschen") {
						//Package Befehl -> package C6 
							PartData[PartNr] = exchangePart(PartData[PartNr],liste[Auswahl]);
							dlgAccept();
						} */
						dlgPushButton("&Attribute austauschen (Platzhalter erhalten)") {
							if(pinCheck(PartData[PartNr],liste[Auswahl])) {
								PartData[PartNr] = exchangePart(PartData[PartNr],liste[Auswahl],ATTR_ONLY);
								if(POnly) 
									PlaceholderOnly[initial_PartNr] = exchangePart(PlaceholderOnly[initial_PartNr],liste[Auswahl],ATTR_ONLY);
								}
							dlgAccept();
						}
						dlgPushButton("Attribute für alle identischen Bauteile austauschen (Platzhalter erhalten)") {
							if(pinCheck(PartData[PartNr],liste[Auswahl])) 
								changeAllidenticalParts(PartData[PartNr],liste[Auswahl],ATTR_ONLY);
							dlgAccept();
						}
						dlgPushButton("-&Abbrechen") dlgReject();
					};
					
					dlgAccept();
				}
			}
			dlgHBoxLayout{
				dlgPushButton("eigenen Datensatz anlegen") {
					newDataset(PartNr);
				}
				dlgStretch(1);
				dlgPushButton("&OK") {
					dlgAccept();
				}
				dlgPushButton("-&Cancel") {
					dlgReject();
				}
			}
		};		
		
	} else {
		dlgMessageBox("Das Bauteil hat kein Package..");
	}
}
/**
 *  @brief 	Das auszuführende Script mit dem Bauteile ersetzt werden, wird
 *  				mit dieser Funktion erstellt
 *  
 *  @return das Script
 */
string buildScript() {
	string cmd;
	string temp_arr[];
	string lib;
	string currentpage;
	int val;
		
	for(int i = 0; i < Bauteile; i++){
		val = evalChangeMode(getPartVal(PartData[i],CHANGE_MODE));
		int n = strsplit(temp_arr,getPartVal(PartData[i],LIBRARY),'/');
		lib = filesetext(temp_arr[n-1],"");
		string value;
		string mirrored = "";
		string orientation = getPartVal(PartData[i],ORIENTATION);
		if(getPartVal(PartData[i],MIRRORED) == "true") 
			mirrored = "M";
			//Debug("i:"+int2str(i)+"\n" +
	//					"val:"+int2str(val)+"\n" +
//						"cmd:"+cmd);
		switch(val){
			case 0: break; //NONE
			case 1: {		//COMPLETE
									//Replace Befehl -> replace C6 'BC817'@'ZE SMD Vorzugsliste'
								cmd += 	"REPLACE " 
												+ getPartVal(PartData[i],PART_NAME) + " '"
												+ getPartVal(PartData[i],DEVICE_NAME) + "@"
												+ lib + "';\n";
								/* if(orientation != "0" || mirrored == "M") {
										if(currentpage != getPartVal(PartData[i],SHEET)) {
											cmd += "EDIT .s"+getPartVal(PartData[i],SHEET)+";\n";
											currentpage = getPartVal(PartData[i],SHEET);
										}
										//cmd += "ROTATE =R0 '"+getPartVal(PartData[i],PART_NAME)+"';\n";
										//cmd += "ROTATE ="+mirrored+"R"+orientation+" '"+getPartVal(PartData[i],PART_NAME)+"';\n";
										} */
								break;
								}
			case 2: break; //ATTR_SYM
			case 3: break; //PACK_ONLY
			case 4: {	//ATTR_ONLY
								//Debug(PartData[i]);
								//Debug("currentpage: "+currentpage+"\ngetPartVal(PartData["+int2str(i)+"],SHEET):"+getPartVal(PartData[i],SHEET));
								if(currentpage != getPartVal(PartData[i],SHEET)) {
									cmd += "EDIT .s"+getPartVal(PartData[i],SHEET)+";\n";
									currentpage = getPartVal(PartData[i],SHEET);
								}
								for(int k = 0; k < 5; k++) {
									if(getPartVal(PartData[i],PartAttribOrder[k]) == "") value = " ";
									else value = getPartVal(PartData[i],PartAttribOrder[k]);
										if(getPartVal(PartDataRecovery[i],PartAttribOrder[k]) != "")
											cmd += 	"ATTRIBUTE "
															+ getPartVal(PartData[i],PART_NAME) + " "
															+ att[k] + " DELETE;\n";
										cmd += 	"ATTRIBUTE " 
														+ getPartVal(PartData[i],PART_NAME) + " "
														+ att[k] + " '"
														+ value + "' "
														+ "R0 (0 0);\n";
									
								}
								if(getPartVal(PartData[i],VALU) != "")
								cmd +=  "VALUE "
													+ getPartVal(PartData[i],PART_NAME) + " '"
													+ getPartVal(PartData[i],VALU) + "';\n";
								break;
							}
			default: break;
		
		}
	}

	return cmd;
}



int MainMenu(int Darstellung) {
status("MainMenu()");
	int Ansicht = (Darstellung & 0x02) ? 1 : 0;
	int MainAuswahl;
	int Platzhalter = (Darstellung & 0x04) ? 1 : 0;
	string Headline;
	if(Darstellung & 0x02) {
		Headline =	strjoin(PartDataValueNames,'\t');
	} else {
		for(int i = 0;i < 7; i++)
			if(Headline == "") {
				Headline += PartDataValueNames[i];
			} else {
				Headline += "\t" +PartDataValueNames[i];
			}
	}
	if(Darstellung & 0x04) {
		dlgDialog("Liste der verwendeten Bauteile") {
			dlgVBoxLayout{
				dlgHBoxLayout{
					dlgVBoxLayout{dlgSpacing(800);}
					dlgVBoxLayout{
						dlgListView(Headline
												,PlaceholderOnly
												,MainAuswahl)
						Vorschlaege(MainAuswahl, 1);
						dlgHBoxLayout{
							dlgCheckBox("&detaillierte Ansich", Ansicht) {
								Darstellung ^= 0x02;
								dlgAccept();
							}
							dlgCheckBox("&nur Platzhalter anzeigen", Platzhalter) {
								Darstellung ^= 0x04;
								dlgAccept();
							}
							dlgPushButton("&OK") {
								Darstellung = 0;
								dlgAccept();
							}
							dlgPushButton("-&Cancel") {
								Darstellung = 0;
								exit(0);
							}
						}
					}
				}
			}	
		};
	} else {
		dlgDialog("Liste der verwendeten Bauteile") {
			dlgVBoxLayout{
				dlgHBoxLayout{
					dlgVBoxLayout{dlgSpacing(800);}
					dlgVBoxLayout{
						dlgListView(Headline
												,PartData
												,MainAuswahl)
						Vorschlaege(MainAuswahl, 0);
						dlgHBoxLayout{
							dlgCheckBox("&detaillierte Ansich", Ansicht) {
								Darstellung ^= 0x02;
								dlgAccept();
							}
							dlgCheckBox("&nur Platzhalter anzeigen", Platzhalter) {
								Darstellung ^= 0x04;
								dlgAccept();
							}
							dlgPushButton("&OK") {
								Darstellung = 0;
								dlgAccept();
							}
							dlgPushButton("-&Cancel") {
								Darstellung = 0;
								exit(0);
							}
						}
					}
				}
			}	
		};
	}
	return Darstellung;
}

void main() {
	if(schematic) {
		string temp[];
		int returnvalOfMainMenu = 1;
		string cmd;
		
		fileglob(tempStrArr1,"N:/public/Eagle_6+/lbr/*.lbr");
		LibList = strjoin(tempStrArr1,'\n');
		fileread(Pac_Sort,"N:/public/Eagle_6+/ulp/Bauteile_nach_Package_sortiert.csv");
		Bauteile = strsplit(Pac_Sort_Arr, Pac_Sort,'\n');
		fileread(Val_Sort,"N:/public/Eagle_6+/ulp/Bauteile_nach_Val_sortiert.csv");
		strsplit(Val_Sort_Arr, Val_Sort,'\n');
		getPartData();
		while((returnvalOfMainMenu = MainMenu(returnvalOfMainMenu)));
		cmd = buildScript();
		//Debug(cmd);
		if(fileglob(temp,"C:/Users/Scholzj/Desktop/")) 
			output("C:/Users/Scholzj/Desktop/debug.txt", "wt") { 
			printf("%s",cmd); 
		}
		exit(cmd);
	} else {
		exit(0);
	}
}